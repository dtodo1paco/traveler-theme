AUI().ready(    'anim',    'event-touch',    'event-key',    'event-resize',    'transition',	function(A) {		var Lang = A.Lang;        var WIN = A.getWin();        animation = false;        //Global effects        var nodeBody = A.getBody();        bodyTransition = nodeBody.attr('transition');        bodyDuration = nodeBody.attr('duration');        layoutAlert = nodeBody.attr('layoutalert');        var portletDockbar = A.one('.portlet-dockbar');        if (portletDockbar) {            var toggleDockbar = A.one('a.user-avatar-link');            var toggleDockbarLeave = A.one('.portlet-dockbar .dockbar');            if (toggleDockbar) {                toggleDockbar.on(                    'mouseenter',                    function() {                        nodeBody.removeClass('over');                        closingDockbar = toggleDockbarLeave.once(                            'clickoutside',                            function() {                                nodeBody.addClass('over');                            }                        );                    }                );            }        }        //On ready width and height        var winHeight = WIN.get('innerHeight');        if (Lang.isUndefined(winHeight)) {            winHeight = document.documentElement.clientHeight;        }        var winWidth = (WIN.get('innerWidth') - 240);        if (Lang.isUndefined(winWidth)) {            winWidth = document.documentElement.clientWidth;        }        //Opacity Porlets always visible        var OpacityNodes = A.all('#content .columns-1>div>div>div>.portlet-boundary.lfr-configurator-visibility');        if (OpacityNodes) {            OpacityNodes.removeClass('lfr-configurator-visibility');        }        //Blocks with fullSize Portlets in #content        var fullSizeNodes = A.all('#content .columns-1>div>div>div>.portlet-boundary');        var fullSizeNodesSize = fullSizeNodes.size();        if (fullSizeNodesSize == 0) {            var nodeToAlert = A.one('.portlet-layout');            var fullPage = A.one('.page-maximized');            if (nodeToAlert && layoutAlert == "true" && !fullPage) {                nodeToAlert.prepend('<div class="alert alert-error mac container"><button type="button" class="close closeAlertMaC" data-dismiss="alert">Ã—</button><strong>Warning!</strong> This Theme needs more than one portlet on screen and 1-column layout selected to generate Portlets carousel. <br/> You will be able to use Nested Portlet to create complex layouts in 1-column layout.<br/> Anyway you can deactivate this alert in Theme settings.</div>');                A.one('.closeAlertMaC').once(                'click',                    function() {                        A.one('.alert-error.mac').remove();                    }                );            }        } else {            console.log('PORTLETS on screen: '+fullSizeNodesSize);        }        //If we have two or more Portlets in #content        if (fullSizeNodesSize >= 2) {            var nodeInitialState = true;            var fullSizeNodesCalc = function() {    	        var winHeight = WIN.get('innerHeight');    	        if (Lang.isUndefined(winHeight)) {    	            winHeight = document.documentElement.clientHeight;    	        }                var winWidth = (WIN.get('innerWidth') - 240);                if (Lang.isUndefined(winWidth)) {                    winWidth = document.documentElement.clientWidth;                }                var circles = A.one('.circles .center');                fullSizeNodes.each(                	function(node,i) {            			node.setStyle('height', winHeight);                        node.setStyle('width', winWidth);                        node.addClass('floatleft');                        var nextNode = node.one('span');                        nextNode.attr('id', 'portlet-left'+i);            			node.addClass('done');                        /* Diferents styles to half of circles */                        if (nodeInitialState) {                            if (i >= (fullSizeNodesSize/2)) {                                var rotate = 'rotate-right';                            }                            else {                                var rotate = 'rotate-left';                            };                            circles.prepend('<a href="#portlet-left'+i+'" class="scroll-arrow circle '+rotate+' circle'+i+'"><span>'+(i+1)+'</span></a>');                        }            		}            	);                var contentNode = A.one('#content');                contentNode.setStyle('width', (winWidth*fullSizeNodesSize));                var bodyNode = A.one('body');                bodyNode.setStyle('max-width', winWidth);                var auiNode = A.one('.aui');                auiNode.setStyle('max-width', winWidth);            }            if (!fullSizeNodes.isEmpty()) {                A.on('windowresize', fullSizeNodesCalc);                fullSizeNodesCalc();            }            var nodeInitialState = false;            // Lateral POV (Point Of View), detect it number of slide            var POV = fullSizeNodes;            var findPOV = function() {                POV.each(                    function(node) {                        var winScrollX = WIN.get('docScrollX');                        var ScrollPos = (winScrollX + winWidth);                        var nodePos = node.getX() + (winWidth);                        var winWidthHalf = (winWidth/2);                        var winWidthDouble = (winWidth*2);                        if ((ScrollPos+winWidthHalf) >= nodePos) {                            node.addClass('POV_on');                        }                        else {                            node.removeClass('POV_on');                        }                        if ((ScrollPos-winWidthHalf) >= nodePos) {                            node.addClass('POV_off');                        }                        else {                            node.removeClass('POV_off');                        }                    }                );                var slidesSizeNodes = A.all('.POV_on');                var slidesSizeNodesSize = slidesSizeNodes.size();                //console.log('You are on slide: '+slidesSizeNodesSize);                //Calculate Porcent bar                var porcentBar = A.one('.porcentBar');                if (porcentBar) {                    var porcentTotal = ((slidesSizeNodesSize-1) * 100) / (POV.size()-1);                    porcentBar.setStyle('width', porcentTotal+'%');                }                //Calculate Arrows to                var arrowleft = A.one('.arrow-left');                var arrowright = A.one('.arrow-right');                if (slidesSizeNodesSize == fullSizeNodesSize) {                    arrowleft.addClass('hide-arrow');                }                else {                    arrowleft.attr('href', '#portlet-left'+(slidesSizeNodesSize));                    arrowleft.removeClass('hide-arrow');                };                if (slidesSizeNodesSize <= 1) {                    arrowright.addClass('hide-arrow');                }                else {                    arrowright.attr('href', '#portlet-left'+(slidesSizeNodesSize-2));                    arrowright.removeClass('hide-arrow');                };                //Calculate Circles                var circlesNodes = A.all('.circle');                var circleNodeSelected = A.one('.circle'+(slidesSizeNodesSize-1)+'');                circlesNodes.removeClass('selected');                circleNodeSelected.addClass('selected');                //Global variables                left = A.one('#portlet-left'+(slidesSizeNodesSize-2));                right = A.one('#portlet-left'+(slidesSizeNodesSize));                POVslide = slidesSizeNodesSize;            }            if (!POV.isEmpty()) {                A.on('scroll', findPOV);                A.on('windowresize', findPOV);            }            /* Center touchend or resize */            var centerOnNodeSelected = function() {                findPOV();                var section = A.one('#portlet-left'+(POVslide-1));                var scrollToY = Lang.toInt(section.getY());                var scrollToX = Lang.toInt(section.getX());                var goAnim = new A.Anim(                    {                        duration: 0.3,                        easing: 'easeOutStrong',                        node: 'win',                        to: {                            scroll: [scrollToX, scrollToY]                        }                    }                );                goAnim.run();            }            A.on('touchend', centerOnNodeSelected);            A.on('windowresize', centerOnNodeSelected);            centerOnNodeSelected();            /* Keys to navegate */            A.one('doc').delegate(                'key',                function(event) {                    var dir = event.keyCode === 37 ? left : right;                    keydownGoTo(dir);                },                'down:37,39'            );            var keydownGoTo = function (k) {                var nodeBody = A.one('body');                if (k != null && animation == false && !nodeBody.hasClass('opened')) {                    animation = true;                    var scrollToY = Lang.toInt(k.getY());                    var scrollToX = Lang.toInt(k.getX());                    var goAnim = new A.Anim(                        {                            duration: bodyDuration,                            easing: bodyTransition,                            elapsedTime: 2000,                            node: 'win',                            to: {                                scroll: [scrollToX, scrollToY]                            }                        }                    );                    goAnim.run();                    goAnim.on(                        'end',                        function() {                            animation = false;                        }                    );                };            }            // Scroll animate arrows            A.all('.scroll-arrow').on(                'click',                function(animScroll) {                    var instance = this;                    var node = animScroll.currentTarget;                    var section = A.one(node.get('hash'));                    if (section && animation == false) {                        animation = true;                        var scrollToY = Lang.toInt(section.getY());                        var scrollToX = Lang.toInt(section.getX());                        animScroll.preventDefault();                        var goAnim = new A.Anim(                            {                                duration: bodyDuration,                                easing: bodyTransition,                                node: 'win',                                to: {                                    scroll: [scrollToX, scrollToY]                                }                            }                        );                        goAnim.run();                        goAnim.on(                            'end',                            function() {                                animation = false;                                section.focus();                            }                        );                    }                }            );            //Add reset to edit controls icon, reload page            var iconEye = A.one('.controls-state-icon');            if (iconEye) {                iconEye.on(                    'click',                    function(eye) {                        var nodeEye = eye.currentTarget;                        if (nodeEye.hasClass('icon-eye-open')) {                            var nodeLoading = A.one('.loading');                            nodeLoading.show(true);                            location.reload();                        }                    }                );            }        }        else {            var arrows = A.all('.scroll-arrow');            arrows.addClass('hide-arrow');        };        //Blocks with fullHeightNodes        var fullHeightNodes = A.all('.fullHeight');        var fullHeightNodesCalc = function() {            var winHeight = WIN.get('innerHeight');            if (Lang.isUndefined(winHeight)) {                winHeight = document.documentElement.clientHeight;            }            fullHeightNodes.each(                function(node) {                    node.setStyle('minHeight', winHeight);                    node.addClass('done');                }            );        }        if (!fullHeightNodes.isEmpty()) {            A.on('windowresize', fullHeightNodesCalc);            fullHeightNodesCalc();        }		//Blocks with fullCenter over previus block or over full windows height		var fullCenter = A.all('.fullCenter');        var fullCenterCalc = function() {            fullCenter.each(            	function(node) {            		var parent = node.ancestor('div');            		if (node.hasClass('fullWinCenter')) {    			        var winHeight = WIN.get('innerHeight');						if (Lang.isUndefined(winHeight)) {							winHeight = document.documentElement.clientHeight;						}						var parentHeight = winHeight;            		}                    else {						var parentHeight = parent.height();            		}                    var parentWidth = parent.width();                    var nodeHeight = node.height();                    var nodeWidth = node.width();                    node.setStyle('top', (parentHeight/2)-(nodeHeight/2)+'px');                    node.setStyle('left', (parentWidth/2)-(nodeWidth/2)+'px');        		}        	);        }       //We show the class of loading div        var nodeLoading = A.one('.loading');        nodeLoading.hide(true);		// Animate.css show        var animateCss = A.all('.pre-animated');        var winWidth = (WIN.get('innerWidth') - 240);        if (Lang.isUndefined(winWidth)) {            winWidth = document.documentElement.clientWidth;        }        var findAnimateCss = function() {            animateCss.each(                function(node) {                    var ScrollPos = (WIN.get('docScrollX') + winWidth);                    var winWidthMin = winWidth/4;                    var nodePos = node.getX() + winWidthMin;                    var effect = node.attr('effect');                    if (!effect) {                        effect = 'flipInX';                    }                    if (ScrollPos > nodePos) {                        A.later(                            1000,                            window,                            function(){                                node.addClass('animated');                                node.addClass(effect);                                node.removeClass('pre-animated');                            }                        );                    }                }            );        }        if (!animateCss.isEmpty()) {            A.on('scroll', findAnimateCss);            findAnimateCss();        }		// Animate.css hover        var animateCssHover = A.all('.hover-animated');        var findAnimateCssHover = function() {            animateCssHover.each(                function(node) {                    var effect = node.attr('effect');                    if (!effect) {                        effect = 'pulse';                    }                    node.on(						'hover',						function() {							node.addClass('animated');	                        node.addClass('infinite');	                        node.addClass(effect);						}						,						function() {							node.removeClass(effect);						}					);				}			);		}		if (!animateCssHover.isEmpty()) {			A.on('scroll', findAnimateCssHover);			findAnimateCssHover();		}        /* Center elements the last action */        if (!fullCenter.isEmpty()) {            A.on('windowresize', fullCenterCalc);            fullCenterCalc();        }        /* Add button fullscreen in add-controls */        var addControls = A.one('.nav.nav-account-controls');        if (addControls) {            addControls.prepend('<li class="site-add-controls"> <a href="#" class="full-screen" style="background:#F87F5A; border-radius: 15px;"> <i class="icon-fullscreen"></i> <span class="nav-item-label">Full screen</span> </a> </li>');        }        A.one('.full-screen').on(            'click',            function toggleFullScreen() {                if (isFullScreen()) {                    exitFullScreen();                }                else {                    requestFullScreen(document.documentElement);                }            }        );        /* Fullscreen functions on all browsers */        var isFullScreen = function() {            return (document.fullScreenElement && document.fullScreenElement !== null)                 || document.mozFullScreen                 || document.webkitIsFullScreen;        }        var requestFullScreen = function(node) {            if (node.requestFullscreen) {                node.requestFullscreen();            }            else if (node.msRequestFullscreen) {                node.msRequestFullscreen();            }            else if (node.mozRequestFullScreen) {                node.mozRequestFullScreen();            }            else if (node.webkitRequestFullscreen) {                node.webkitRequestFullscreen();            }        }        var exitFullScreen = function() {            if (document.exitFullscreen) {                document.exitFullscreen();            }            else if (document.msExitFullscreen) {                document.msExitFullscreen();            }            else if (document.mozCancelFullScreen) {                document.mozCancelFullScreen();            }            else if (document.webkitExitFullscreen) {                document.webkitExitFullscreen();            }        }	});